'use strict';

var path        = require('path'),
    through     = require('through2'),
    gutil       = require('gulp-util'),
    path        = require('path'),
    rollup      = require('rollup'),
    PLUGIN_NAME = 'gulp-rollup',
    PluginError = gutil.PluginError,
    Plugin      = require('rollup-plugin-vinyl')
;

module.exports = gulpRollup;


/**
 * Rollup plugin for gulp
 *
 * @example
 *   gulp.src('app.js', {read: false})
 *       .pipe(rollup(options))
 * 		   .pipe(gulp.dest('dist'));
 *
 * @param {{ plugins: Array<Object>= }} options The options pass to `Rollup.rollup.generate` with  plugins array added.
 * @return {stream.Transform} Return a Transform stream.
 */
function gulpRollup(options) {

  options = options || {};

  return through.obj(
    function (file, encoding, callback) {
      if (file.isNull()) {
        return callback(null, file);
      } else if (file.isStream()) {
        return callback(createError('Streaming not supported'));
      } else if (!file.isBuffer()) {
        return callback(createError('The file content must be a Buffer'));
      }

      var plugins;

      if (options.plugins) {
        plugins = options.plugins;
        delete options.plugins;
      } else {
        plugins = [];
      }

      transform(plugins, options, file, callback);

    },
    function() {
      this.emit('end');
    }
  );

}


/**
 * Transform Vinyl file content.
 *
 * @param {Array<Object>} plugins A array of plugin passed to `Rollup.rollup`.
 * @param {Object} options Options object for `Rollup.rollup.generate`.
 * @param {{ contents: Buffer, sourceMap: Object= }} file A Vinyl file.
 * @param {function(Error, Vinyl):?} callback A callback to return Error or a Vinyl file.
 */
function transform (plugins, options, file, callback) {
  rollup.rollup({
    entry: file.path,
    plugins: [Plugin(file)].concat(plugins)
  })
  .then(
    function (bundle) {
      generate(bundle, options, file, callback);
    },
    function(e) {
      callback(createError(e));
    }
  );
}


/**
 * Generate code and map from Rollup bundle.
 *
 * @param {{ generate: function(Object) }} bundle The bundle generated by Rollup
 * @param {Object} options Options sent to `Rollup.rollup.generate`.
 * @param {{ contents: Buffer, sourceMap: Object= }} file A Vinyl file.
 * @param {function(Error, Vinyl):?} callback A callback to return Error or a Vinyl file.
 */
function generate(bundle, options, file, callback) {

  var result, map;

  try {
    result = bundle.generate(options);
  } catch (e) {
    callback(createError(e));
    return;
  }

  file.contents = new Buffer(result.code);

  if (result.map) {
    map = result.map;
    map.file = Plugin.unix(file.relative);
    map.sources = map.sources.map(function(fileName) {
      return Plugin.unix(path.relative(file.base, fileName));
    });
    file.sourceMap = map;
  }

  callback(null, file);
}


/**
 * Create a plugin error from Error.
 *
 * @param {Error} e An Error.
 * @return {PluginError} A plugin error.
 */
function createError(e) {
  return new PluginError(PLUGIN_NAME, e, { showStack: true });
}
